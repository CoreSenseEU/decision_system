<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4">
  <BehaviorTree ID="DecideOnGraphRoute">
    <Fallback>
      <SubTree ID="DecideOnGraphRouteDawesRule"
               chosen="{routes}"
               target="{target}"
               _autoremap="true"/>
      <SubTree ID="DecideOnGraphRouteOneGoodReason"
               alternatives="{chosen}"
               target="{target}"/>
    </Fallback>
  </BehaviorTree>

  <BehaviorTree ID="DecideOnGraphRouteDawesRule">
    <Sequence>
      <GetAlternativesQuery query="robot_pose(P), route(P, {target}, _A)"/>
      <GetCuesFixed cues="[fraction_doors_known_free, neg_fraction_doors_known_blocked]"/>
      <AssessAlternatives name="action_assess"
                          alternatives="{alternatives}"
                          cues="{cues}"/>
      <AggregateUtilitySigned name="aggregate_with_dawes_rule"
                              policy="dawes"
                              assessments="{assessments}"/>
      <OrderLexicographical name="order_routes"/>
      <TakeBest/>
      <AcceptN n="1"/>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="DecideOnGraphRouteOneGoodReason">
    <Sequence>
      <!-- Get alternatives from the input port -->
      <GetAlternativesFixed alternatives="{alternatives}"/>
      <GetCuesFixed cues="[path_length]"/>
      <AssessAlternatives name="action_assess" alternatives="{alternatives}" cues="{cues}"/>
      <AggregatePassAssessments name="aggregate_pass_assessments" assessments="{assessments}"/>
      <OrderLexicographical name="order_routes" evaluation="{evaluation}"/>
      <TakeN name="action_take_n" n="1" ordering="{ordering}"/>
      <!-- In a behavior tree, AcceptAlways can be omitted and keep the 
           same behavior, as long as the typing is correct. -->
      <AcceptAlways name="action_accept_always" choice="{choice}"/>
    </Sequence>
  </BehaviorTree>

  <BehaviorTree ID="NavigateToTargetRoom">
    <ReactiveFallback>
      <PrologCondition name="is_target_room_current_room"
                       query="in_room(P, {target_room}), robot_pose(P)"/>
      <Sequence>
        <SubTree ID="DecideOnGraphRoute"
                 choice="{waypoints}"
                 target="room"
                 _autoremap="false"/>
        <!-- TODO: move last waypoint to in front of doorway-->
        <NavigateThroughWaypoints name="navigate_to_just_inside_room_doorway"
                                  waypoints="{waypoints}"/>
      </Sequence>
    </ReactiveFallback>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Action ID="AcceptN"
            editable="true">
      <input_port name="n"/>
    </Action>
    <Action ID="AggregateUtilitySigned"
            editable="true">
      <input_port name="policy"/>
      <output_port name="assessments"/>
    </Action>
    <Action ID="AssessAlternatives"
            editable="true">
      <input_port name="alternatives"/>
      <input_port name="cues"/>
    </Action>
    <Action ID="GetAlternativesQuery"
            editable="true">
      <input_port name="query"/>
    </Action>
    <Action ID="GetCuesFixed"
            editable="true">
      <input_port name="cues"/>
    </Action>
    <Action ID="NavigateThroughWaypoints"
            editable="true">
      <input_port name="waypoints"/>
    </Action>
    <Action ID="OrderLexicographical"
            editable="true"/>
    <Condition ID="PrologCondition"
               editable="true">
      <input_port name="query"/>
    </Condition>
    <Action ID="TakeBest"
            editable="true"/>
  </TreeNodesModel>

</root>
